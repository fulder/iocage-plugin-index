freebsd_instance:
  image_family: freebsd-12-2
  cpu: 1
  memory: "1"

install_template: &INSTALL_PLUGIN
  requirements_script: pkg install -y jq
  install_script: |
    release=$(jq -r '.release' $PLUGIN_FILE)
    name=$(jq '.name' $PLUGIN_FILE)
    packagesite=$(jq '.packagesite' $PLUGIN_FILE)
    fingerprints=$(jq -r '.fingerprints | keys[]' $PLUGIN_FILE)
    plugin_repo=$(jq -r '.artifact' $PLUGIN_FILE)

    pkg_dir=/usr/local/test
    repos_dir="${pkg_dir}/repos"
    fingerprints_dir="${pkg_dir}/fingerprints"

    echo "Creating main repos dir: ${repos_dir}"
    mkdir -p $repos_dir
    export REPOS_DIR=$repos_dir

    pkg_conf_path="${repos_dir}/test.conf"
    echo "iocage-plugins: {" > $pkg_conf_path
    echo "url: $packagesite," >> $pkg_conf_path
    echo "signature_type: \"fingerprints\"," >> $pkg_conf_path
    echo "fingerprints \"${fingerprints_dir}\"," >> $pkg_conf_path
    echo "enabled: true" >> $pkg_conf_path
    echo } >> $pkg_conf_path
    echo "Created test pkg config file:"
    cat $pkg_conf_path

    trusted_fingerprints="$fingerprints_dir/trusted"
    mkdir -p "${trusted_fingerprints}"

    for repo_name in $fingerprints
    do
      repo_fingerprints=$(jq -rc '."fingerprints"."'${repo_name}'"[]' $PLUGIN_FILE)

      repo_count=1
      echo $repo_fingerprints | while IFS='' read f
      do
        echo "Creating fingerprint file for repo:"
        echo $f

        function=$(echo $f | jq -r '.function')
        fingerprint=$(echo $f | jq -r '.fingerprint')
        file_path=${trusted_fingerprints}/${repo_name}_${repo_count}

        echo "Creating new fingerprint file: ${file_path}"

        echo "function: $function" > ${file_path}
        echo "fingerprint: $fingerprint" >> ${file_path}

        repo_count=$(expr $repo_count + 1)
      done
    done

    echo "Test install plugin pkgs for plugin: $name"
    pkgs=$(jq -r '.pkgs | join(" ")' $PLUGIN_FILE)
    echo "Installing $name pkgs: $pkgs"
    pkg install -y $pkgs

    pkg install -y git-lite
    git clone ${plugin_repo} ./plugin
    if [ -d "./plugin/overlay" ]
    then
      echo "Found overlay folder"
      cp -r ./plugin/overlay/ /
    fi

    if ! echo ${pkgs} | grep -q "git"
    then
      pkg remove -y git-lite
    fi

    ./plugin/post_install.sh

    if [ -f ./plugin/pre_update.sh ]
    then
      ./plugin/pre_install.sh
    fi

    if [ -f ./plugin/post_update.sh ]
    then
      ./plugin/post_update.sh
    fi

install_backuppc_task:
  <<: *INSTALL_PLUGIN
  env:
    PLUGIN_FILE: "backuppc.json"
install_bazarr_task:
  <<: *INSTALL_PLUGIN
  env:
    PLUGIN_FILE: "bazarr.json"
install_bind_task:
  <<: *INSTALL_PLUGIN
  env:
    PLUGIN_FILE: "bind.json"
install_calibre-web_task:
  <<: *INSTALL_PLUGIN
  env:
    PLUGIN_FILE: "calibre-web.json"
install_channels-dvr_task:
  <<: *INSTALL_PLUGIN
  env:
    PLUGIN_FILE: "channels-dvr.json"
install_clamav_task:
  <<: *INSTALL_PLUGIN
  env:
    PLUGIN_FILE: "clamav.json"
install_deluge-pip_task:
  <<: *INSTALL_PLUGIN
  env:
    PLUGIN_FILE: "deluge-pip.json"
install_dnsmasq_task:
  <<: *INSTALL_PLUGIN
  env:
    PLUGIN_FILE: "dnsmasq.json"
install_drupal8_task:
  <<: *INSTALL_PLUGIN
  env:
    PLUGIN_FILE: "drupal8.json"
install_duplicati_task:
  <<: *INSTALL_PLUGIN
  env:
    PLUGIN_FILE: "duplicati.json"
install_emby_task:
  <<: *INSTALL_PLUGIN
  env:
    PLUGIN_FILE: "emby.json"
install_emby-server-stable_task:
  <<: *INSTALL_PLUGIN
  env:
    PLUGIN_FILE: "emby-server-stable.json"
install_esphome_task:
  <<: *INSTALL_PLUGIN
  env:
    PLUGIN_FILE: "esphome.json"
install_famp_task:
  <<: *INSTALL_PLUGIN
  env:
    PLUGIN_FILE: "famp.json"
install_gitea_task:
  <<: *INSTALL_PLUGIN
  env:
    PLUGIN_FILE: "gitea.json"
install_gitlab_task:
  <<: *INSTALL_PLUGIN
  env:
    PLUGIN_FILE: "gitlab.json"
install_gogs_task:
  <<: *INSTALL_PLUGIN
  env:
    PLUGIN_FILE: "gogs.json"
install_grafana_task:
  <<: *INSTALL_PLUGIN
  env:
    PLUGIN_FILE: "grafana.json"
install_heimdall-dashboard_task:
  <<: *INSTALL_PLUGIN
  env:
    PLUGIN_FILE: "heimdall-dashboard.json"
install_homeassistant_task:
  <<: *INSTALL_PLUGIN
  env:
    PLUGIN_FILE: "homeassistant.json"
install_homebridge_task:
  <<: *INSTALL_PLUGIN
  env:
    PLUGIN_FILE: "homebridge.json"
install_hoobs_task:
  <<: *INSTALL_PLUGIN
  env:
    PLUGIN_FILE: "hoobs.json"
install_i2p_task:
  <<: *INSTALL_PLUGIN
  env:
    PLUGIN_FILE: "i2p.json"
install_irssi_task:
  <<: *INSTALL_PLUGIN
  env:
    PLUGIN_FILE: "irssi.json"
install_jackett_task:
  <<: *INSTALL_PLUGIN
  env:
    PLUGIN_FILE: "jackett.json"
install_jenkins_task:
  <<: *INSTALL_PLUGIN
  env:
    PLUGIN_FILE: "jenkins.json"
install_jenkins-lts_task:
  <<: *INSTALL_PLUGIN
  env:
    PLUGIN_FILE: "jenkins-lts.json"
install_lidarr_task:
  <<: *INSTALL_PLUGIN
  env:
    PLUGIN_FILE: "lidarr.json"
install_madsonic_task:
  <<: *INSTALL_PLUGIN
  env:
    PLUGIN_FILE: "madsonic.json"
install_mineos_task:
  <<: *INSTALL_PLUGIN
  env:
    PLUGIN_FILE: "mineos.json"
install_monica_task:
  <<: *INSTALL_PLUGIN
  env:
    PLUGIN_FILE: "monica.json"
install_mosquitto_task:
  <<: *INSTALL_PLUGIN
  env:
    PLUGIN_FILE: "mosquitto.json"
install_motioneye_task:
  <<: *INSTALL_PLUGIN
  env:
    PLUGIN_FILE: "motioneye.json"
install_netdata_task:
  <<: *INSTALL_PLUGIN
  env:
    PLUGIN_FILE: "netdata.json"
install_node-red_task:
  <<: *INSTALL_PLUGIN
  env:
    PLUGIN_FILE: "node-red.json"
install_nzbget_task:
  <<: *INSTALL_PLUGIN
  env:
    PLUGIN_FILE: "nzbget.json"
install_openspeedtest-server_task:
  <<: *INSTALL_PLUGIN
  env:
    PLUGIN_FILE: "openspeedtest-server.json"
install_openvpn_task:
  <<: *INSTALL_PLUGIN
  env:
    PLUGIN_FILE: "openvpn.json"
install_privatebin_task:
  <<: *INSTALL_PLUGIN
  env:
    PLUGIN_FILE: "privatebin.json"
install_qbittorrent_task:
  <<: *INSTALL_PLUGIN
  env:
    PLUGIN_FILE: "qbittorrent.json"
install_quasselcore_task:
  <<: *INSTALL_PLUGIN
  env:
    PLUGIN_FILE: "quasselcore.json"
install_radarr_task:
  <<: *INSTALL_PLUGIN
  env:
    PLUGIN_FILE: "radarr.json"
install_rslsync_task:
  <<: *INSTALL_PLUGIN
  env:
    PLUGIN_FILE: "rslsync.json"
install_rtorrent-flood_task:
  <<: *INSTALL_PLUGIN
  env:
    PLUGIN_FILE: "rtorrent-flood.json"
install_sabnzbd_task:
  <<: *INSTALL_PLUGIN
  env:
    PLUGIN_FILE: "sabnzbd.json"
install_sickchill_task:
  <<: *INSTALL_PLUGIN
  env:
    PLUGIN_FILE: "sickchill.json"
install_sonarr_task:
  <<: *INSTALL_PLUGIN
  env:
    PLUGIN_FILE: "sonarr.json"
install_tasmoadmin_task:
  <<: *INSTALL_PLUGIN
  env:
    PLUGIN_FILE: "tasmoadmin.json"
install_tautulli_task:
  <<: *INSTALL_PLUGIN
  env:
    PLUGIN_FILE: "tautulli.json"
install_transmission_task:
  <<: *INSTALL_PLUGIN
  env:
    PLUGIN_FILE: "transmission.json"
install_unificontroller_task:
  <<: *INSTALL_PLUGIN
  env:
    PLUGIN_FILE: "unificontroller.json"
install_unificontroller-lts_task:
  <<: *INSTALL_PLUGIN
  env:
    PLUGIN_FILE: "unificontroller-lts.json"
install_vault_task:
  <<: *INSTALL_PLUGIN
  env:
    PLUGIN_FILE: "vault.json"
install_weechat_task:
  <<: *INSTALL_PLUGIN
  env:
    PLUGIN_FILE: "weechat.json"
install_xmrig_task:
  <<: *INSTALL_PLUGIN
  env:
    PLUGIN_FILE: "xmrig.json"
install_zoneminder_task:
  <<: *INSTALL_PLUGIN
  env:
    PLUGIN_FILE: "zoneminder.json"
install_zrepl_task:
  <<: *INSTALL_PLUGIN
  env:
    PLUGIN_FILE: "zrepl.json"
install_zwavejs2mqtt_task:
  <<: *INSTALL_PLUGIN
  env:
    PLUGIN_FILE: "zwavejs2mqtt.json"

freebsd_instance:
  cpu: 1
  memory: "1"

install_template: &INSTALL_PLUGIN
  requirements_script: pkg install -y jq
  install_script: |
    release=$(jq -r '.release' $PLUGIN_FILE)
    name=$(jq '.name' $PLUGIN_FILE)
    packagesite=$(jq '.packagesite' $PLUGIN_FILE)
    fingerprints=$(jq -r '.fingerprints | keys[]' $PLUGIN_FILE)
    plugin_repo=$(jq -r '.artifact' $PLUGIN_FILE)

    pkg_dir=/usr/local/test
    repos_dir="${pkg_dir}/repos"
    fingerprints_dir="${pkg_dir}/fingerprints"

    echo "Creating main repos dir: ${repos_dir}"
    mkdir -p $repos_dir
    export REPOS_DIR=$repos_dir

    pkg_conf_path="${repos_dir}/test.conf"
    echo "iocage-plugins: {" > $pkg_conf_path
    echo "url: $packagesite," >> $pkg_conf_path
    echo "signature_type: \"fingerprints\"," >> $pkg_conf_path
    echo "fingerprints \"${fingerprints_dir}\"," >> $pkg_conf_path
    echo "enabled: true" >> $pkg_conf_path
    echo } >> $pkg_conf_path
    echo "Created test pkg config file:"
    cat $pkg_conf_path

    trusted_fingerprints="$fingerprints_dir/trusted"
    mkdir -p "${trusted_fingerprints}"

    for repo_name in $fingerprints
    do
      repo_fingerprints=$(jq -rc '."fingerprints"."'${repo_name}'"[]' $PLUGIN_FILE)

      repo_count=1
      echo $repo_fingerprints | while IFS='' read f
      do
        echo "Creating fingerprint file for repo:"
        echo $f

        function=$(echo $f | jq -r '.function')
        fingerprint=$(echo $f | jq -r '.fingerprint')
        file_path=${trusted_fingerprints}/${repo_name}_${repo_count}

        echo "Creating new fingerprint file: ${file_path}"

        echo "function: $function" > ${file_path}
        echo "fingerprint: $fingerprint" >> ${file_path}

        repo_count=$(expr $repo_count + 1)
      done
    done

    echo "Test install plugin pkgs for plugin: $name"
    pkgs=$(jq -r '.pkgs | join(" ")' $PLUGIN_FILE)
    echo "Installing $name pkgs: $pkgs"
    pkg install -y $pkgs

    if [ "$(which git)" = "" ]
    then
      pkg install -y git-lite || pkg install -y git
    fi

    release_branch="$(freebsd-version | cut -d '-' -f1)-RELEASE"
    git clone -b ${release_branch} ${plugin_repo} ./plugin || git clone -b master ${plugin_repo} ./plugin

    if [ -d "./plugin/overlay" ]
    then
      echo "Found overlay folder"
      cp -r ./plugin/overlay/ /
    fi

    if ! echo ${pkgs} | grep -q "git"
    then
      pkg remove -y git-lite git
      pkg autoremove -y
    fi

    ./plugin/post_install.sh

    if [ -f ./plugin/pre_update.sh ]
    then
      ./plugin/pre_update.sh
    fi

    if [ -f ./plugin/post_update.sh ]
    then
      ./plugin/post_update.sh
    fi

    if [ -f ./plugin/ui.json ]
    then
      admin_portal=$(jq -r '.adminportal' ./plugin/ui.json | sed 's/%%IP%%/localhost/')

      if echo $a | grep -q "http\|localhost"
      then
        echo "Found http or localhost in adminportal, will try to fetch"
      else
        exit 0
      fi

      max_retries=10
      retry=0
      fetch_success=false
      sleep_time=5

      while [ $retry -lt $max_retries ]
      do
        retry=$(expr $retry + 1)

        if fetch ${admin_portal} 2> /dev/null
        then
          fetch_success=true
          break
        fi

        echo "Admin UI fetch failed, sleeping ${sleep_time} seconds, and retrying (${retry}/${max_retries})"
        sleep ${sleep_time}
      done

      if $fetch_success
      then
        echo "Admin Portal reachable"
      else
        echo "Could not fetch Admin Portal"
        exit 1
      fi
    fi

backuppc_task:
  <<: *INSTALL_PLUGIN
  matrix:
    - freebsd_instance:
        image_family: freebsd-12-2
  env:
    PLUGIN_FILE: "backuppc.json"

